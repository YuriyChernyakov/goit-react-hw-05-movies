{"version":3,"file":"static/js/209.67e9abb5.chunk.js","mappings":"oQAqGA,UA5Fe,WAAO,IAAD,EACnB,GAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA4BN,EAAAA,EAAAA,WAAS,GAArC,eAAOO,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,CAAC,GAAzD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAU,UAAGF,EAAaG,IAAI,iBAApB,QAAiC,GAEjD,GAA0CC,EAAAA,EAAAA,MAAlCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,MAG1BC,GAAWC,EAAAA,EAAAA,MAkCjB,OAtBAC,EAAAA,EAAAA,YAAU,WACRlB,EAASU,GACT,IAAMS,EAAS,kHAA8GpB,EAA9G,+BAEf,GAAKA,EAAL,CAGA,IAAMqB,EAAM,mCAAG,2FACbd,GAAU,GADG,mBAGUe,EAAAA,EAAAA,GAAMF,GAHhB,OAGLG,EAHK,OAIXpB,EAAaoB,EAAOC,SAEK,IAAzBD,EAAOE,gBAAuBC,EAAAA,EAAAA,IAAM,iCANzB,gDAQXrB,GAAS,GARE,yBAUXE,GAAU,GAVC,4EAAH,qDAaZc,GAdC,CAeF,GAAE,CAACrB,EAAOW,KAET,4BACE,kBAAMgB,SAAUZ,GAlCH,SAAAa,GACX5B,IAAU4B,EAAMC,OAGpBb,IACAX,GAAS,GACTF,EAAa,IACbO,EAAgB,CAAEoB,OAAQF,EAAMC,OAChC5B,EAAS2B,EAAMC,MAChB,IAyBG,WACE,4DACA,4BACE,kCACEE,KAAK,QACDjB,EAAS,OAAQ,CAAEkB,UAAU,KAFnC,IAGEC,YAAY,YAGd,mBAAQF,KAAK,SAAb,2BAGJ,SAAC,KAAD,IACCzB,IAAU,SAAC,IAAD,IACVF,GACC,+FAIA,wBACGF,IAAc,IACbA,EAAUgC,KACR,gBAAGC,EAAH,EAAGA,GAAIN,EAAP,EAAOA,KAAMO,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,YAApB,IAAiCC,aAAAA,OAAjC,MAAgD,GAAhD,SACE,yBACE,UAAC,KAAD,CAAMC,GAAE,UAAKJ,GAAMK,MAAO,CAAEC,KAAMxB,GAAlC,UACG,KACD,gBACEyB,IAAKL,EAjET,kCAiEiCA,EAhEjC,iIAiEIM,IAAKd,EACLe,QAAQ,SALZ,OAOGR,QAPH,IAOGA,EAAAA,EAASP,EAPZ,KAQoB,KAAjBS,EACGA,EAAaO,MAAM,EAAG,GACtB,eAVN,QADOV,EADX,QAsBb,C","sources":["Pages/Movies.js"],"sourcesContent":["import { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { fetch } from 'components/Fetch';\nimport { useEffect } from 'react';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport { useLocation } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\n\nconst Movies = () => {\n  const [qwery, setQwery] = useState('');\n  const [searchres, setSearchres] = useState([]);\n  const [error, setError] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const searchName = searchParams.get('search') ?? '';\n\n  const { register, handleSubmit, reset } = useForm();\n  const imgLink = 'https://image.tmdb.org/t/p/w300';\n  const defaultImg = `https://st4.depositphotos.com/14953852/22772/v/600/depositphotos_227725020-stock-illustration-no-image-available-icon-flat.jpg`;\n  const location = useLocation();\n\n  const onSubmit = value => {\n    if (qwery === value.name) {\n      return;\n    }\n    reset();\n    setError(false);\n    setSearchres([]);\n    setSearchParams({ search: value.name });\n    setQwery(value.name);\n  };\n  useEffect(() => {\n    setQwery(searchName);\n    const findFilms = `https://api.themoviedb.org/3/search/movie?api_key=73d1d1a66744e8a71fb191bdd223462e&language=en-US&query=${qwery}&page=1&include_adult=false`;\n\n    if (!qwery) {\n      return;\n    }\n    const getApi = async () => {\n      setLoader(true);\n      try {\n        const getTop = await fetch(findFilms);\n        setSearchres(getTop.results);\n\n        getTop.total_results === 0 && toast(\"Sorry,we didn't find anything\");\n      } catch {\n        setError(true);\n      } finally {\n        setLoader(false);\n      }\n    };\n    getApi();\n  }, [qwery, searchName]);\n  return (\n    <div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label>Enter the name of the movie</label>\n        <div>\n          <input\n            type=\"text\"\n            {...register('name', { required: true })}\n            placeholder=\"Conan\"\n          />\n\n          <button type=\"submit\">Search</button>\n        </div>\n      </form>\n      <ToastContainer />\n      {loader && <Loader />}\n      {error ? (\n        <h2>\n          Sorry, something went wrong. Please reload the page and try again\n        </h2>\n      ) : (\n        <ul>\n          {searchres !== [] &&\n            searchres.map(\n              ({ id, name, title, poster_path, release_date = [] }) => (\n                <li key={id}>\n                  <Link to={`${id}`} state={{ from: location }}>\n                    {' '}\n                    <img\n                      src={poster_path ? imgLink + poster_path : defaultImg}\n                      alt={name}\n                      loading=\"lazy\"\n                    />\n                    {title ?? name} (\n                    {release_date !== ''\n                      ? release_date.slice(0, 4)\n                      : 'unknown year'}\n                    )\n                  </Link>\n                </li>\n              )\n            )}\n        </ul>\n      )}\n    </div>\n  );\n};\nexport default Movies;"],"names":["useState","qwery","setQwery","searchres","setSearchres","error","setError","loader","setLoader","useSearchParams","searchParams","setSearchParams","searchName","get","useForm","register","handleSubmit","reset","location","useLocation","useEffect","findFilms","getApi","fetch","getTop","results","total_results","toast","onSubmit","value","name","search","type","required","placeholder","map","id","title","poster_path","release_date","to","state","from","src","alt","loading","slice"],"sourceRoot":""}